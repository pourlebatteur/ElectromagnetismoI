# -*- coding: utf-8 -*-
"""test_laplace_relaxation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HtIihhCuTo041V04YVwZFcCdTWUHTWQP
"""

import laplace_relaxation
import numpy as np

def test_potencial():
    # Define test parameters
    N = 5
    M = 5
    Vxi = 0
    Vxf = 0
    Vyi = -1
    Vyf = 1

    # Call the 'potencial' function
    V = laplace_relaxation.potencial(N, M, Vxi, Vxf, Vyi, Vyf)

    # Verify if the size of matrix V is correct
    assert V.shape == (N, M)

    # Verify if the boundary values are correct
    assert np.all(V[0, :] == Vxi)
    assert np.all(V[-1, :] == Vxf)
    assert np.all(V[:, 0] == Vyi)
    assert np.all(V[:, -1] == Vyf)

def test_relajacion():
    # Define test parameters
    N = 5
    M = 5
    Vxi = 0
    Vxf = 0
    Vyi = -1
    Vyf = 1
    tolerance = 1e-4

    # Call the 'potencial' and then the 'relajacion' function
    V = laplace_relaxation.potencial(N, M, Vxi, Vxf, Vyi, Vyf)
    V_final = laplace_relaxation.relajacion(V, N, M, tolerance)

    # Verify if the size of matrix V_final is correct
    assert V_final.shape == (N, M)

    # Here you could add more assertions to verify if the 'relajacion' function produces the expected results

def test_analitica():
    # Define test parameters
    N = 5
    M = 5
    v0 = 1
    a = 1
    b = 1

    # Call the 'analitica' function
    Va = laplace_relaxation.analitica(N, M, v0, a, b)

    # Verify if the size of matrix Va is correct
    assert Va.shape == (N, M)

    # Here you could add more assertions to verify if the 'analitica' function produces the expected results

# Run the tests
if __name__ == "__main__":
    test_potencial()
    test_relajacion()
    test_analitica()
    print("All tests passed successfully.")